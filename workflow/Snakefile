import pandas as pd
configfile: "config/config.yaml"

wildcard_constraints:
    agg_result_file="[a-zA-Z_\-]+",
    scenario="\d+",
    model_run="\d+"

RESULTS = pd.read_csv(config["result_params"]).set_index('name')
SCENARIOS = pd.read_csv(config["datapackage"]).set_index('name')
MODELRUNS = range(config['replicates'])
AGG_RESULTS = pd.read_csv(config["agg_results"])

include: "rules/osemosys.smk"

rule all:
    input:
        expand("results/{scenario}/{model_run}.json", model_run=MODELRUNS, scenario=SCENARIOS.index),
        # expand("results/{agg_result_file}.{ext}", agg_result_file=AGG_RESULTS['filename'], ext=config['filetype']),
        # expand("results/hourly_demand.{ext}", ext=config['filetype']),
        # expand("results/hourly_generation.{ext}", ext=config['filetype'])
    message: "Running pipeline to generate the files '{input}'"

rule create_sample:
    params:
        replicates=config['replicates'],
        parameters=config['parameters']
    output: expand("modelruns/{{scenario}}/{x}_sample.txt", x=range(config['replicates']))
    conda: "envs/sample.yaml"
    log: "results/create_{scenario}_sample.log"
    shell:
        "python workflow/scripts/create_sample.py {params.parameters} {output}"

rule clean:
    shell:
        "rm -rf results/* && rm -rf results/* && rm -rf modelruns/*"

rule clean_plots:
    shell:
        "rm -f results/{modelrun}/*.pdf"

rule plot:
    input: "results/{modelrun}/{result}.csv"
    output: "results/{modelrun}/{result}.pdf"
    conda: "envs/plot.yaml"
    message: "Generating plot using '{input}' and writing to '{output}'"
    shell:
        "python workflow/scripts/plot_results.py {input} {output}"

rule make_dag:
    output: pipe("dag.txt")
    shell:
        "snakemake --dag > {output}"

rule plot_dag:
    input: "dag.txt"
    output: "dag.png"
    conda: "envs/dag.yaml"
    shell:
        "dot -Tpng {input} > dag.png && open dag.png"
