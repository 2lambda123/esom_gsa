import pandas as pd
configfile: "config/config.yaml"

RESULTS = pd.read_csv(config["result_params"]).set_index('name')
# SCENARIOS = pd.read_csv(config["scenarios"]).set_index('name')
MODELRUNS = range(config['replicates'])
AGG_RESULTS = pd.read_csv(config["agg_results"])

include: "rules/osemosys.smk"

rule all:
    input: expand("results/{agg_result_file}.csv", agg_result_file=AGG_RESULTS['filename'])
    message: "Running pipeline to generate the files '{input}'"

rule create_sample:
    params:
        replicates=config['replicates'],
        parameters=config['parameters']
    output: expand('modelruns/{x}_sample.txt', x=range(config['replicates']))
    conda: "envs/sample.yaml"
    log: "results/create_sample.log"
    shell:
        "python workflow/scripts/create_sample.py {params.replicates} {params.parameters}"

def get_input(wildcards):
    input_file = AGG_RESULTS.set_index('filename').loc[wildcards.agg_result_file]['resultfile']
    return ["results/{modelrun}/{input_file}.csv".format(modelrun=x, input_file=input_file) for x in MODELRUNS]

def get_indices(wildcards):
    return AGG_RESULTS.set_index('filename').loc[wildcards.agg_result_file]['indices']

rule extract_results:
    input: get_input
    params:
        parameter=get_indices
    log: "results/log/extract_{agg_result_file}.log"
    output: "results/{agg_result_file}.csv"
    conda: "envs/pandas.yaml"
    script: "scripts/interconnectoractivity.py"

rule clean:
    shell:
        "rm -rf results/* && rm -rf results/* && rm -rf modelruns/*"

rule clean_plots:
    shell:
        "rm -f results/{modelrun}/*.pdf"

rule plot:
    input: "results/{modelrun}/{result}.csv"
    output: "results/{modelrun}/{result}.pdf"
    conda: "envs/plot.yaml"
    message: "Generating plot using '{input}' and writing to '{output}'"
    shell:
        "python workflow/scripts/plot_results.py {input} {output}"

rule make_dag:
    output: pipe("dag.txt")
    shell:
        "snakemake --dag > {output}"

rule plot_dag:
    input: "dag.txt"
    output: "dag.png"
    conda: "envs/dag.yaml"
    shell:
        "dot -Tpng {input} > dag.png && open dag.png"
